<%
/*
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var uri = request.getRequestURI();
var uriMatcher = new URIMatcher(String(uri));

var log = new Log("api/device-api.jag");

var constants = require("/modules/constants.js");
var dcProps = require('/config/dc-props.js').config();

var deviceModule = require("/modules/device.js").deviceModule;

var carbon = require('carbon');
var carbonHttpServletTransport = carbon.server.address('http');
var carbonHttpsServletTransport = carbon.server.address('https');

var result;

if (uriMatcher.match("/{context}/api/device/sketch/download")) {
	sketchType = request.getParameter("sketchType");
	deviceType = request.getParameter("deviceType");

	if (!sketchType) {
		log.error("Sketch Type is empty");
	}

	var user = session.get(constants.USER_SESSION_KEY);
	if (!user) {
		response.sendRedirect(dcProps.appContext + "login?#login-required");
		exit();
	}

	//URL: https://localhost:9443/{deviceType}/download?owner={username}
	deviceManagerService = carbonHttpsServletTransport + "/" + deviceType + "/manager";
	sketchDownloadEndPoint = deviceManagerService + "/device/" + sketchType + "/download";
	response.sendRedirect(sketchDownloadEndPoint + "?owner=" + user.username);
	exit();//stop execution

} else if (uriMatcher.match("/{context}/api/devices/all")) {
	var user = session.get(constants.USER_SESSION_KEY);
	if (!user) {
		response.sendRedirect(dcProps.appContext + "login?#login-required");
		exit();//stop execution
	}

	//URL: https://localhost:9443/devicecloud/manager/devices/username/{username}
	deviceCloudService = carbonHttpsServletTransport + "/devicecloud/device_manager";
	listAllDevicesEndPoint = deviceCloudService + "/devices/username/" + user.username;

	var data = {};
	//XMLHTTPRequest's GET
	result = get(listAllDevicesEndPoint, data, "json");

} else if (uriMatcher.match("/{context}/api/devices/types")) {

	result = deviceModule.listDeviceTypes();

} else if (uriMatcher.match("/{context}/api/device/{deviceType}/{deviceId}/remove")) {
	var user = session.get(constants.USER_SESSION_KEY);
	if (!user) {
		response.sendRedirect(dcProps.appContext + "login?#login-required");
		exit();//stop execution
	}

	var elements = uriMatcher.elements();
	var deviceId=elements.deviceId;
	var deviceType = elements.deviceType;
	result = deviceModule.removeDevice(deviceType, deviceId);

} else if (uriMatcher.match("/{context}/api/device/{deviceType}/{deviceId}/update")) {
	var user = session.get(constants.USER_SESSION_KEY);
	if (!user) {
		response.sendRedirect(dcProps.appContext + "login?#login-required");
		exit();//stop execution
	}

	var elements = uriMatcher.elements();
	var deviceId=elements.deviceId;
	var deviceType = elements.deviceType;
	var cont = request.getContent();

	if(!cont.device){
		// http status code 400 refers to - Bad request.
		result = 400;
	}else {
		result = deviceModule.updateDevice(deviceType, deviceId, cont.device);
	}
}

// returning the result.
if (result) {
	print(result);
}
%>
